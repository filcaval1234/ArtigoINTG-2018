Automatically generated by Mendeley Desktop 1.17.11
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop
@article{BENEDUSI1992225,
title = "Reverse engineering processes, design document production, and structure charts",
journal = "Journal of Systems and Software",
volume = "19",
number = "3",
pages = "225 - 245",
year = "1992",
issn = "0164-1212",
doi = "https://doi.org/10.1016/0164-1212(92)90053-M",
url = "http://www.sciencedirect.com/science/article/pii/016412129290053M",
author = "P Benedusi and A Cimitile and U De Carlini",
abstract = "Abstract This article describes a high-level organizational paradigm for setting up reverse engineering processes capable of automatically generating design-level information and documents straight from code. It also illustrates an instantiation of the paradigm for the reconstruction of the structure charts of a software system according to the Yourdon-Constantine methodology. Discussion focuses on the reconstruction of structure charts at different levels of detail by means of information abstraction processes. These processes use an algebraic model to represent a software module and generate the structure charts of a whole system by successive abstractions of the data represented in the algebraic model of each of its modules."
}@article{Antonov2016,
abstract = {The driving forces for this project are demands for a hardware, reconfigurable, high performance, low cost and low power solution that could be used in a widest range of Internet of Things (IoT) devices. The solution should be able to secure computer networks against emerging threats and vulnerabilities, sustaining privacy and trust This paper presents an approach for developing a novel hardware platform for Ethernet-based network firewall security services for IP networks. The article highlights functional and structural levels of the proposed hardware architecture, performance estimations and a trade-off between performance and hardware cost. Some implementation details, including HDL used, testing approaches and design tools are provided as well.},
author = {Antonov, Alexander P. and Filippov, Alexey S. and Mamoutova, Olga V.},
doi = {10.1109/FRUCT-ISPIT.2016.7561501},
file = {:D$\backslash$:/artigo POO/07561501.pdf:pdf},
isbn = {9789526839721},
issn = {23057254},
journal = {Conference of Open Innovation Association, FRUCT},
pages = {9--14},
title = {{Next generation FPGA-based platform for network security}},
volume = {2016-Septe},
year = {2016}
}
@article{Santos2009,
abstract = {RESUMO: Um dos m{\'{e}}todos de an{\'{a}}lise de c{\'{o}}digo fonte que a engenharia de software utiliza s{\~{a}}o princ{\'{i}}pios da engenharia reversa que a partir de uma cole{\c{c}}{\~{a}}o de teorias, metodologias e t{\'{e}}cnicas s{\~{a}}o capazes de realizar a extra{\c{c}}{\~{a}}o e abstra{\c{c}}{\~{a}}o de informa{\c{c}}{\~{o}}es de um software existente, produzindo documentos consistentes, quer seja a partir do c{\'{o}}digo fonte, ou por meio da adi{\c{c}}{\~{a}}o de conhecimento e experi{\^{e}}ncia que n{\~{a}}o poderiam ser automaticamente reconstru{\'{i}}dos a partir do c{\'{o}}digo. Recentemente na literatura foram sugeridas que informa{\c{c}}{\~{o}}es extra{\'{i}}das do vocabul{\'{a}}rio de software revelam outros aspectos n{\~{a}}o contemplados pelas m{\'{e}}tricas estruturais tradicionais. O objetivo deste trabalho {\'{e}} realizar uma an{\'{a}}lise de desempenho de uma ferramenta de extra{\c{c}}{\~{a}}o de vocabul{\'{a}}rio por meio de uma ferramenta distribu{\'{i}}da, ou seja dispon{\'{i}}vel para acesso remoto, em que a an{\'{a}}lise da extra{\c{c}}{\~{a}}o de vocabul{\'{a}}rios pode ser realizada por meio deste servi{\c{c}}o web. A partir da ferramenta {\'{e}} poss{\'{i}}vel gerar um arquivo XML e CSV que s{\~{a}}o usados exclusivamente para investigar propriedades gerais dos vocabul{\'{a}}rios de software por meio de dados de entrada para uma esp{\'{e}}cie do coordenador de software afim de combinar m{\'{e}}tricas estruturais ou din{\^{a}}micas em pesquisas emp{\'{i}}ricas de engenharia de software. A avali{\c{c}}{\~{a}}o de desempenho do Extrator de Vocabul{\'{a}}rio ocorreu por meio do uso de 24 amostras dos reposit{\'{o}}rios github, googlecode e de outros reposit{\'{o}}rios de projetos. Palavras-chave: webservice, c{\'{o}}digo fonte, tempo de processamento, consumo de mem{\'{o}}ria. ABSTRACT: One of the source code analysis methods that software engineering principles used are reverse engineering from a collection of theories, methodologies and techniques are able to perform the extraction and abstraction of information from an existing software, producing consistent documents, whether it be from source code, or by the addition of knowledge and experience that could not be automatically reconstructed from the code. Recently in the literature were suggested that information extracted from software vocabulary reveal other aspects not covered by traditional structural metrics. The objective of this study is to conduct a performance analysis of a vocabulary extraction tool by means of a distributed tool, it means available for remote access, in which the analysis of the vocabulary extraction can be performed through this web service. As from the tool and can generate a XML and CSV file that are used exclusively to investigate general properties of by means of data entry software vocabularies into a kind of software engineer in order to combine structural or dynamic metrics in empirical research engineering software. The performance evaluation Vocabulary Extractor occurred through the use of 24 samples from github repositories, GoogleCode and other project repositories.},
author = {Santos, Katyusco De F},
file = {:D$\backslash$:/Nova pasta (2)/PrincipiaArtigoExtrator.pdf:pdf},
keywords = {memory consumption,processing time,source code,webservice},
title = {{Webservice De Extra{\c{c}}{\~{a}}o De Vocabul{\'{a}}rio De C{\'{o}}digo Para Pesquisas Emp{\'{i}}ricas Em Engenharia De Software}},
year = {2009}
}
@article{Miller-Karlow,
abstract = {Complex hardware systems design demands the effective use of organized approaches t o design. Recently, the VHSIC Hardware Description Language (VHDL) was developed for use an the design process. Tradiiionally, engineers have developed hardware descriptions based on schematic circuit diagrams, which are a visual notation. When using VHDL, designers are hampered by the cumbersome nature of the language syntax. W e have developed a visual hardware description language, Visual V H D L (vVH.DL), that incorporates the major features of VHDL. This paper presents the syntax of v V H D L and the design system used for developing vVHDL programs.},
author = {Miller-Karlow, D L and Golin, E J},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/ArtigoINTG-branchLeandro/ArtigoINTG-branchLeandro/ArtigosBase/vVHDL A Visual Hardware Description Language.pdf:pdf},
title = {{vVHDL: A Visual Hardware Description Language}}
}
@book{Data2004,
author = {Data, Serial Bus Peer-to-peer},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/ArtigoINTG-branchLeandro/ArtigoINTG-branchLeandro/ArtigosBase/IEEE standard verilog.pdf:pdf},
isbn = {0738138207},
number = {April},
title = {{IEEE Standards}},
volume = {2001},
year = {2004}
}
@article{Antonov2016,
abstract = {The driving forces for this project are demands for a hardware, reconfigurable, high performance, low cost and low power solution that could be used in a widest range of Internet of Things (IoT) devices. The solution should be able to secure computer networks against emerging threats and vulnerabilities, sustaining privacy and trust This paper presents an approach for developing a novel hardware platform for Ethernet-based network firewall security services for IP networks. The article highlights functional and structural levels of the proposed hardware architecture, performance estimations and a trade-off between performance and hardware cost. Some implementation details, including HDL used, testing approaches and design tools are provided as well.},
author = {Antonov, Alexander P. and Filippov, Alexey S. and Mamoutova, Olga V.},
doi = {10.1109/FRUCT-ISPIT.2016.7561501},
file = {:D$\backslash$:/artigo POO/07561501.pdf:pdf},
isbn = {9789526839721},
issn = {23057254},
journal = {Conference of Open Innovation Association, FRUCT},
pages = {9--14},
title = {{Next generation FPGA-based platform for network security}},
volume = {2016-Septe},
year = {2016}
}
@article{Duran2015,
abstract = {Production and trade growth opportunities brought about by globalization and increased competition, productivity growth requires in business. Sources declined with each passing day, constantly increasing needs. This in turn increases the need for businesses to use resources more efficiently. Work and time study techniques is raising the efficiency of utilization of the factors of production have been used for all manufacturing and service sectors as a scientific approach. In the content of study a firm that produces tea glass is analysed in terms work/time during the process of model production. In order to measure efficiency of tea glass models, time survey is made and by the help of that method standardized time is calculated. Actual time and standardized time is compared and as a result it is aimed that measuring inevitable times and take necessary precautions against them. As a result of the study, waiting time cause inefficiency in the work of molder and in the content of work/time, efficiency is increased 53 percent and model production capacity is reached at 237.},
author = {Duran, Cengiz and Cetindere, Aysel and Aksu, Yunus Emre},
doi = {10.1016/S2212-5671(15)00887-4},
file = {:C$\backslash$:/Users/fc.corporation/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Duran, Cetindere, Aksu - 2015 - Productivity Improvement by Work and Time Study Technique for Earth Energy-glass Manufacturing Company.pdf:pdf},
issn = {22125671},
journal = {Procedia Economics and Finance},
keywords = {business performance,productivity,total quality management},
number = {15},
pages = {109--113},
publisher = {Elsevier B.V.},
title = {{Productivity Improvement by Work and Time Study Technique for Earth Energy-glass Manufacturing Company}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S2212567115008874},
volume = {26},
year = {2015}
}
@article{IEEEComputerSociety2013,
abstract = {The definition of the language syntax and semantics for SystemVerilog, which is a unified hardware design, specification, and verification language, is provided. This standard includes support for modeling hardware at the behavioral, register transfer level (RTL), and gate-level abstraction levels, and for writing testbenches using coverage, assertions, object-oriented programming, and constrained random verification. The standard also provides application programming interfaces (APIs) to foreign programming languages.},
author = {{IEEE Computer Society} and {IEEE Standards Association Corporate Advisory Group}},
doi = {10.1109/IEEESTD.2013.6469140},
file = {:C$\backslash$:/Users/fc.corporation/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/IEEE Computer Society, IEEE Standards Association Corporate Advisory Group - 2013 - IEEE Standard for SystemVerilog–Unified Hardware Des.pdf:pdf},
isbn = {978-0-7381-8110-3},
keywords = {assertions, design automation, design verification},
number = {February},
pages = {1315},
title = {{IEEE Standard for SystemVerilog–Unified Hardware Design, Specification, and Verification Language}},
volume = {2012},
year = {2013}
}
@article{Kuznik2011,
abstract = {As embedded systems incorporate more and more amounts of IP and embedded software the functional and nonfunctional verification task is one of the key bottlenecks in the design process. Despite proprietary design and verification languages such as IEEE-1800 SystemVerilog and IEEE-1647 e offer CDV functionalities neither SystemC or the SCV addon library contain these features. Moreover, as programming languages and verification paradigms of the hardware and software domain continue to converge the verification techniques and methodologies need to take account of that, e.g. by adaption of the aspect-oriented programming scheme. In this paper we describe an approach for enhancing the functional coverage collection in the SystemC ecosystem by means of aspects, allowing cross-cutting the concern of CDV verification in stand-alone aspects, increasing the overall verification productivity.},
author = {Kuznik, Christoph and Muller, Wolfgang},
doi = {10.1109/ISOCC.2011.6138670},
file = {:D$\backslash$:/artigo POO/06138670.pdf:pdf},
isbn = {978-1-4577-0710-0},
journal = {2011 International SoC Design Conference},
pages = {154--157},
title = {{Aspect enhanced functional coverage driven verification in the SystemC HDVL}},
year = {2011}
}
@article{Antoniol2007,
abstract = {Identifiers represent an important source of information for programmers understanding and maintaining a system. Self-documenting identifiers reduce the time and effort necessary to obtain the level of understanding appropriate for the task at hand. While the role of the lexicon in program comprehension has long been recognized, only a few works have studied the quality and enhancement of the identifiers and no works have studied the evolution of the lexicon. In this paper, we characterize the evolution of program identifiers in terms of stability metrics and occurrences of renaming. We assess whether an evolution process similar to the one occurring for the program structure exists for identifiers. We report data and results about the evolution of three large systems, for which several releases are available. We have found evidence that the evolution of the lexicon is more limited and constrained than the evolution of the structure. We argue that the different evolution results from several factors including the lack of advanced tool support for lexicon construction, documentation, and evolution.},
author = {Antoniol, Giuliano and Gu{\'{e}}h{\'{e}}neuc, Yann Ga{\"{e}}l and Merlo, Ettore and Tonella, Paolo},
doi = {10.1109/ICSM.2007.4362614},
file = {:C$\backslash$:/Users/fc.corporation/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Antoniol et al. - 2007 - Mining the lexicon used by programmers during sofware evolution.pdf:pdf},
isbn = {1424412560},
issn = {10636773},
journal = {IEEE International Conference on Software Maintenance, ICSM},
pages = {14--23},
title = {{Mining the lexicon used by programmers during sofware evolution}},
year = {2007}
}
@article{Flake,
author = {Flake, Peter},
file = {:D$\backslash$:/artigo POO/Why SystemVerilog.pdf:pdf},
keywords = {domain-specific,hdvl,systemverilog,verilog},
title = {{Why SystemVerilog ?}}
}
@book{Automation1996,
author = {Automation, Design and Committee, Standards},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/ArtigoINTG-branchLeandro/ArtigoINTG-branchLeandro/ArtigosBase/IEEE Standard Hardware Description.pdf:pdf},
isbn = {1559377275},
keywords = {and electronics engineers,computer,computer languages,digital systems,electronic systems,hard-,hardware,hardware description languages,hdl,inc,pli,programming language interface,the institute of electrical,verilog,verilog pli,ware design},
title = {{IEEE Standard Hardware Description Language Based on the Verilog ¨ Hardware Description Language}},
year = {1996}
}
@book{sutherland2006,
abstract = {In its updated second edition, this book has been extensively revised on a chapter by chapter basis. The book accurately reflects the syntax and semantic changes to the SystemVerilog language standard, making it an essential reference for systems professionals who need the latest version information. In addition, the second edition features a new chapter explaining the SystemVerilog "packages", a new appendix that summarizes the synthesis guidelines presented throughout the book, and all of the code examples have been updated to the final syntax and rerun using the latest version of the Synopsys, Mentor, and Cadance tools.},
author = {Sutherland, Stuart and Davidmann, Simon and Flake, Peter},
doi = {10.1007/0-387-36495-1},
file = {:D$\backslash$:/artigo POO/Springer - SystemVerilog for Design, 2nd Edition.pdf:pdf},
isbn = {0-387-36495-1},
pages = {418},
title = {{SystemVerilog for Design Second Edition: A Guide to Using SystemVerilog for Hardware Design and Modeling}},
url = {http://www.amazon.com/SystemVerilog-Design-Second-Hardware-Modeling/dp/0387333991},
year = {2006}
}
@article{Host2007,
abstract = {Method names make or break abstractions: good ones communicate the intention of the method, whereas bad ones cause confusion and frustration. The task of naming is subject to the whims and idiosyncracies of the individual since programmers have little to guide them except their personal experience. By analysing method implementations taken from a corpus of Java applications, we establish the meaning of verbs in method names based on actual use. The result is an automatically generated, domain-neutral lexicon of verbs, similar to a natural language dictionary, that represents the common usages of many programmers},
author = {H{\o}st, Einar W. and {\O}stvold, Bjarte M.},
doi = {10.1109/SCAM.2007.18},
file = {:C$\backslash$:/Users/fc.corporation/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/H{\o}st, {\O}stvold - 2007 - The programmer's lexicon, volume I The verbs.pdf:pdf},
isbn = {0769528805},
journal = {SCAM 2007 - Proceedings 7th IEEE International Working Conference on Source Code Analysis and Manipulation},
pages = {193--202},
title = {{The programmer's lexicon, volume I: The verbs}},
volume = {I},
year = {2007}
}
@article{Burlakov2015,
abstract = {The paper introduces CAHDL, the Computer Architecture and Hardware Description Language. CAHDL is aimed to specify processor instructions and computer hardware formally. Although CAHDL supports RTL modeling to some extent, it is does not describe digital circuits. CAHDL is designed first to specify CPU and hardware behavior, rather than their structure. CAHDL can be applied in simulators, compilers, disassemblers, testers and other programs requiring specification of computer architecture. In the end of the paper we observe how CAHDL is applied in computer simulation. The paper brings some CAHDL syntactic constructions as examples and explains their semantics. Parsing methods are also briefly reviewed.},
author = {Burlakov, A S and Khmelnov, A E},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/ArtigoINTG-branchLeandro/ArtigoINTG-branchLeandro/ArtigosBase/The Computer Architecture and Hardware.pdf:pdf},
number = {May},
pages = {25--29},
title = {{The Computer Architecture and Hardware Description Language}},
year = {2015}
}
@article{Santos2015,
abstract = {Developers choose identifiers to name entities during software coding. While these names are lexically restricted by the language, they reflect the understanding of the developer on the requirements that the entity is devoted for. In this paper, we analyze the use of such vocabularies to identify experts on code entities. For a real software development, e-Pol (Management Information System for Federal Police of Brazil), we observed around 30{\%} of its code entities has more than 0.3 of similarity with at least one developer vocabulary. We propose an approach to catch this potential expertise that vocabularies carries on. Also, we built an oracle of source code entities per developer that allowed us to assess our approach accuracy compared with two others ones: based on commit and based on percentage of modified Lines of Codes. One advantage of our approach is to disregard changes in formatting or indentation of source code as acts of expertise acquisition. We achieve an accuracy ranging from 0.16 to 0.32 depending on the assumed period of developers' contributions and the top-k experts we are interested on. These results confirm similarity between vocabularies might be explored to point out code experts. Moreover, for orphaned entities, expertise approach based on vocabularies can recommend among current team members one whose vocabulary is closest to the entity.},
author = {Santos, Katyusco De F and Guerrero, Dalton D S and Figueiredo, Jorge C A De},
doi = {10.1109/ITNG.2015.149},
file = {:C$\backslash$:/Users/fc.corporation/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Santos, Guerrero, Figueiredo - 2015 - Using Developers Contributions on Software Vocabularies to Identify Experts.pdf:pdf},
isbn = {9781479988273},
journal = {Proceedings - 12th International Conference on Information Technology: New Generations, ITNG 2015},
keywords = {expertise,oracle of experts,software vocabulary},
pages = {451--456},
title = {{Using Developers Contributions on Software Vocabularies to Identify Experts}},
year = {2015}
}
@article{Eder2004,
author = {Eder, Kerstin},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/ArtigoINTG-branchLeandro/ArtigoINTG-branchLeandro/ArtigosBase/Assertion Based Verification Using HDVL.pdf:pdf},
title = {{Assertion Based Verification ( ABV )}},
year = {2004}
}
@article{Bduya1983,
author = {Bduya, M and Botta, H and Vignat, J C and Laboratoire, M and Insa, D G C U and Toulouse, D Informatique C E R T},
doi = {10.1016/0166-3615(84)90027-7},
file = {:C$\backslash$:/Users/fc.corporation/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bduya et al. - 1983 - 20th Design Automation Conference.pdf:pdf},
isbn = {0166-3615},
issn = {01663615},
pages = {382--385},
title = {{20th Design Automation Conference}},
year = {1983}
}
@article{Abebe2009,
abstract = {Source code is a mixed software artifact, containing information for both the compiler and the developers. While programming language grammar dictates how the source code is written, developers have a lot of freedom in writing identifiers and comments. These are intentional in nature and become means of communication between developers.The goal of this paper is to analyze how the source code vocabulary changes during evolution, through an exploratory study of two software systems. Specifically, we collected data to answer a set of questions about the vocabulary evolution, such as: How does the size of the source code vocabulary evolve over time? What do most frequent terms refer to? Are new identifiers introducing new terms? Are there terms shared between different types of identifiers and comments? Are new and deleted terms in a type of identifiers mirrored in other types of identifiers or in comments?},
author = {Abebe, Surafel Lemma and Haiduc, Sonia and Marcus, Andrian and Tonella, Paolo and Antoniol, Giuliano},
doi = {10.1109/CSMR.2009.61},
file = {:C$\backslash$:/Users/fc.corporation/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Abebe et al. - 2009 - Analyzing the evolution of the source code vocabulary.pdf:pdf},
isbn = {9780769535890},
issn = {15345351},
journal = {Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
pages = {189--198},
title = {{Analyzing the evolution of the source code vocabulary}},
year = {2009}
}
@article{Kumar2014,
abstract = {SystemVerilog and SystemC are extensively used for design and Verification in VLSI industry. This paper propose a method to combine SystemVerilog and SystemC code in a single hardware/software simulation which allows design teams to leverage abstract representations of system function as it increases system simulations speed. Both languages interoperate through an intermediate layer of abstraction known as Transaction Level Models (TLMs). This paper develops Universal Verification Methodology (UVM) TLM environment for SV and SC communication in the system modeling},
author = {Kumar, Prem},
file = {:D$\backslash$:/artigo POO/07006275.pdf:pdf},
keywords = {creates requirement of,in real,noise parameters are observed,simulation for comprehensive studies,systemc,systemverilog,the above effect of,time,time scenario during the,tlm,to accommodate such real},
pages = {344--347},
title = {{High Level Modeling Of Physical Layer Noise Parameters Using SystemC}},
year = {2014}
}
@article{Alfke1943,
author = {Alfke, Peter and Bolsens, Ivo and Carter, Bill},
file = {:C$\backslash$:/Users/fc.corporation/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Alfke, Bolsens, Carter - 1943 - Fpga !.pdf:pdf},
number = {November 2011},
pages = {15--20},
title = {{Fpga !}},
year = {1943}
}
@article{Marc-Andre,
abstract = {As the complexity ofmodern digital systems continues to in- crease exponentially, the need for beyondRTL designmethod- ologies is growing as well. In this paper, we propose a high- level hardware description language that allows the user to dynamically modify and constrain the connections between data token sources and sinks. Actual transfers occur when both sources and sinks are ready to proceed, according to different predefined synchronization protocols. At this level of abstraction, both FSM programming and constraint pro- gramming paradigms are combined to enhance the user's ability to describe and exploit fine-grain parallelismin control- intensive hardware designs. The proposed hardware descrip- tion methodology is applied to the description of two hard- ware implementations of theQuickSort algorithm, using pipe- lined memory and comparator components.},
author = {{M. DAIGNEAULT}, J. DAVID},
file = {:C$\backslash$:/Users/fc.corporation/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/M. DAIGNEAULT - 2012 - RAISING THE ABSTRACTION LEVEL OF HDL FOR CONTROL-DOMINANT APPLICATIONS Marc-Andre Daigneault and Jean Pierre Davi.pdf:pdf},
isbn = {9781467322560},
pages = {515--518},
title = {{RAISING THE ABSTRACTION LEVEL OF HDL FOR CONTROL-DOMINANT APPLICATIONS Marc-Andre Daigneault and Jean Pierre David Department of Electrical Engineering , Ecole Polytechnique de Montreal}},
year = {2012}
}
@book{IEEE2000,
abstract = {VHSIC Hardware Description Language (VHDL) is defined. VHDL is a formal notation intended for use in all phases of the creation of electronic systems. Because it is both machine read-able and human readable, it supports the development, verification, synthesis, and testing of hard-ware designs; the communication of hardware design data; and the maintenance, modification, and procurement of hardware. Its primary audiences are the implementors of tools supporting the lan-guage and the advanced users of the language.},
author = {IEEE},
booktitle = {IEEE Std},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/ArtigoINTG-branchLeandro/ArtigoINTG-branchLeandro/ArtigosBase/IEEE Standard VHDL.pdf:pdf},
isbn = {0-7381-1949-0},
keywords = {2000 by the institute,3 park avenue,and electronics engineers,computer languages,copyright,electronic systems,engineers,hardware,hardware design,inc,new york,ny 10016-5997,of electrical and electronics,the institute of electrical,usa,vhdl},
title = {{IEEE Standard VHDL Language Reference Manual IEEE-SA Standards Board}},
volume = {1076},
year = {2000}
}
@article{Navabi2015,
author = {Navabi, Zainalabedin},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/ArtigoINTG-branchLeandro/ArtigoINTG-branchLeandro/ArtigosBase/HDLs Evolve as they Affect Design Methodology.pdf:pdf},
isbn = {9781479919994},
pages = {4799},
title = {{HDLs Evolve as they Affect Design Methodology for a Higher Abstraction and a Better Integration}},
year = {2015}
}
@article{Hahanov2008,
abstract = {the goal of this paper is to provide a basic overview of efficient and powerful approach to testbench construction using an abstract object-oriented framework. Basic testbench environment is reviewed; several corner cases are demonstrated, like synchronization of several transactors working in parallel under SystemVerilog simulation toolsuite . Keywords – Testbench, Object-Oriented Design, System-on-Chip.},
author = {Hahanov, Vladimir and Melnik, Dmitr and Zaharchenko, Oleg and Zaychenko, Sergey},
file = {:D$\backslash$:/artigo POO/05423458.pdf:pdf},
keywords = {object-oriented design,system-on-chip,testbench},
pages = {621--625},
title = {{Overview of Object-Oriented Approach to HDL- Testbench Construction for System-on-Chips}},
year = {2008}
}


