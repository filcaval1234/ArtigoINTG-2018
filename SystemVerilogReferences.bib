Automatically generated by Mendeley Desktop 1.17.11
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Alfke1943,
author = {Alfke, Peter and Bolsens, Ivo and Carter, Bill},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/06069771.pdf:pdf},
number = {November 2011},
pages = {15--20},
title = {{Fpga !}},
year = {1943}
}
@article{Yakopcic2017,
author = {Yakopcic, Chris and Wang, Shu and Wang, Weisong and Shin, Eunsung and Subramanyam, Guru and Taha, Tarek M},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/07966056.pdf:pdf},
isbn = {9781509061822},
keywords = {convolution,device,memristor,neural network},
pages = {1704--1708},
title = {{Methods for High Resolution Programming in Lithuim Niobate Memristors for Neuromorphic Hardware}},
year = {2017}
}
@article{Marc-Andre,
abstract = {As the complexity ofmodern digital systems continues to in- crease exponentially, the need for beyondRTL designmethod- ologies is growing as well. In this paper, we propose a high- level hardware description language that allows the user to dynamically modify and constrain the connections between data token sources and sinks. Actual transfers occur when both sources and sinks are ready to proceed, according to different predefined synchronization protocols. At this level of abstraction, both FSM programming and constraint pro- gramming paradigms are combined to enhance the user's ability to describe and exploit fine-grain parallelismin control- intensive hardware designs. The proposed hardware descrip- tion methodology is applied to the description of two hard- ware implementations of theQuickSort algorithm, using pipe- lined memory and comparator components.},
author = {{M. DAIGNEAULT}, J. DAVID},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/06339268.pdf:pdf},
isbn = {9781467322560},
pages = {515--518},
title = {{RAISING THE ABSTRACTION LEVEL OF HDL FOR CONTROL-DOMINANT APPLICATIONS Marc-Andre Daigneault and Jean Pierre David Department of Electrical Engineering , Ecole Polytechnique de Montreal}},
year = {2012}
}
@article{Bduya1983,
author = {Bduya, M and Botta, H and Vignat, J C and Laboratoire, M and Insa, D G C U and Toulouse, D Informatique C E R T},
doi = {10.1016/0166-3615(84)90027-7},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/01585618.pdf:pdf},
isbn = {0166-3615},
issn = {01663615},
pages = {382--385},
title = {{20th Design Automation Conference}},
year = {1983}
}
@article{Antoniol2007,
abstract = {Identifiers represent an important source of information for programmers understanding and maintaining a system. Self-documenting identifiers reduce the time and effort necessary to obtain the level of understanding appropriate for the task at hand. While the role of the lexicon in program comprehension has long been recognized, only a few works have studied the quality and enhancement of the identifiers and no works have studied the evolution of the lexicon. In this paper, we characterize the evolution of program identifiers in terms of stability metrics and occurrences of renaming. We assess whether an evolution process similar to the one occurring for the program structure exists for identifiers. We report data and results about the evolution of three large systems, for which several releases are available. We have found evidence that the evolution of the lexicon is more limited and constrained than the evolution of the structure. We argue that the different evolution results from several factors including the lack of advanced tool support for lexicon construction, documentation, and evolution.},
author = {Antoniol, Giuliano and Gu{\'{e}}h{\'{e}}neuc, Yann Ga{\"{e}}l and Merlo, Ettore and Tonella, Paolo},
doi = {10.1109/ICSM.2007.4362614},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/04362614.pdf:pdf},
isbn = {1424412560},
issn = {10636773},
journal = {IEEE International Conference on Software Maintenance, ICSM},
pages = {14--23},
title = {{Mining the lexicon used by programmers during sofware evolution}},
year = {2007}
}
@article{Alfke1943,
abstract = {The definition of the language syntax and semantics for SystemVerilog, which is a unified hardware design, specification, and verification language, is provided. This standard includes support for modeling hardware at the behavioral, register transfer level (RTL), and gate-level abstraction levels, and for writing testbenches using coverage, assertions, object-oriented programming, and constrained random verification. The standard also provides application programming interfaces (APIs) to foreign programming languages.},
author = {Antoniol, Giuliano and Gu{\'{e}}h{\'{e}}neuc, Yann Ga{\"{e}}l and Merlo, Ettore and Tonella, Paolo and {IEEE Computer Society} and {IEEE Standards Association Corporate Advisory Group} and Bduya, M and Botta, H and Vignat, J C and Laboratoire, M and Insa, D G C U and Toulouse, D Informatique C E R T and Yakopcic, Chris and Wang, Shu and Wang, Weisong and Shin, Eunsung and Subramanyam, Guru and Taha, Tarek M and Alfke, Peter and Bolsens, Ivo and Carter, Bill},
doi = {10.1109/ICSM.2007.4362614},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/01585618.pdf:pdf;:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/06069771.pdf:pdf;:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/04362614.pdf:pdf;:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/2012 System Verilog Language Reference Manual.pdf:pdf;:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/06339268.pdf:pdf;:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/07966056.pdf:pdf},
isbn = {0166-3615},
issn = {01663615},
journal = {IEEE International Conference on Software Maintenance, ICSM},
keywords = {assertions,convolution,design automation,design verification,device,memristor,neural network},
number = {November 2011},
pages = {382--385},
title = {{Fpga !}},
volume = {2012},
year = {1943}
}
@article{IEEEComputerSociety2013,
abstract = {The definition of the language syntax and semantics for SystemVerilog, which is a unified hardware design, specification, and verification language, is provided. This standard includes support for modeling hardware at the behavioral, register transfer level (RTL), and gate-level abstraction levels, and for writing testbenches using coverage, assertions, object-oriented programming, and constrained random verification. The standard also provides application programming interfaces (APIs) to foreign programming languages.},
author = {{IEEE Computer Society} and {IEEE Standards Association Corporate Advisory Group}},
doi = {10.1109/IEEESTD.2013.6469140},
file = {:C$\backslash$:/Users/fc.corporation/Desktop/artigo POO/2012 System Verilog Language Reference Manual.pdf:pdf},
isbn = {978-0-7381-8110-3},
keywords = {assertions, design automation, design verification},
number = {February},
pages = {1315},
title = {{IEEE Standard for SystemVerilogâ€“Unified Hardware Design, Specification, and Verification Language}},
volume = {2012},
year = {2013}
}
